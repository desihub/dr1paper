#!/usr/bin/env python

"""Code to generate Figure 1 (number of unique tiles per night) and
to print out the core content of Table 4 in the DR1 paper.

source /global/cfs/cdirs/desi/software/desi_environment.sh 25.3
python bin/count_obs

"""
import os
import numpy as np
import healpy as hp
from astropy.table import Table
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

from desimodel.footprint import is_point_in_desi


def get_area(tiles, nside=256):
    """Return area covered by the input tiles;

    Note: since this avoids double counting, it's also ok if the
    "tiles" are a list of exposures instead of tiles; they just need
    TILERA/TILEDEC or RA/DEC columns representing tile centers.

    Code adapted from Anand Raichoor (LBNL).

    """
    npix = hp.nside2npix(nside)
    pixarea = hp.nside2pixarea(nside, degrees=True)
    hpixels = np.arange(npix, dtype=int)
    thetas, phis = hp.pix2ang(nside, hpixels, nest=True)
    hpixra, hpixdec = np.degrees(phis), 90. - np.degrees(thetas)

    if 'RA' not in tiles.colnames:
        tiles['RA'] = tiles['TILERA']

    if 'DEC' not in tiles.colnames:
        tiles['DEC'] = tiles['TILEDEC']

    npix = np.sum(is_point_in_desi(tiles, hpixra, hpixdec))
    return npix*pixarea


def night_to_date(yearmmdd):
    n = str(yearmmdd)
    year = int(n[0:4])
    month = int(n[4:6])
    day = int(n[6:8])
    return datetime(year=year, month=month, day=day)


def date_to_night(date):
    night = date.year*10000 + date.month*100 + date.day
    return night


def build_latex_table(exp, survey_area):

    def getdata(survey):
        ii = exp['SURVEY'] == survey
        surveyexp = exp[ii]
    
        first_night = np.min(surveyexp['NIGHT'])
        last_night = np.max(surveyexp['NIGHT'])
        num_nights = len(np.unique(surveyexp['NIGHT']))
        num_tiles = len(np.unique(surveyexp['TILEID']))
        num_exp = len(surveyexp)
        efftime_hours = np.sum(surveyexp['EFFTIME_SPEC']) / 3600
    
        area = survey_area[survey]
        survey = survey.replace('main_', '')

        return survey, num_nights, num_tiles, num_exp, efftime_hours, area

    print()
    print(r'\begin{deluxetable*}{lccccc}')
    print(r'\tablecaption{Summary of Observational Programs in DR1}')
    print(r'\label{tab:survey_nights_tiles_exp}')
    print(r'\tablehead{')
    print(r'\colhead{} & \colhead{No. of} & \colhead{No. of} & ' + \
          r'\colhead{No. of} & \colhead{Effective Time} & ' + \
          r'\colhead{Area} \\')
    print(r'\colhead{Program} & \colhead{Nights} & \colhead{Tiles} & \colhead{Exposures} & ' + \
          r'\colhead{(h)} & \colhead{(deg$^2$)}')
    print(r'}')
    print(r'\startdata')

    print(r'\multicolumn{6}{c}{Survey Validation} \\')
    print(r'\hline')
    for survey in ['cmx', 'sv1', 'sv2', 'sv3']:
        survey, num_nights, num_tiles, num_exp, efftime_hours, area = getdata(survey)
        print(f'{survey.upper():12s} & {num_nights:3d} & {num_tiles:5d} & '
              rf'{num_exp:6d} & {efftime_hours:6.1f} & {area:.0f} \\')
    print(r'\hline')

    print(r'\multicolumn{6}{c}{Special Observations} \\')
    print(r'\hline')
    for survey in ['special']:
        survey, num_nights, num_tiles, num_exp, efftime_hours, area = getdata(survey)
        print(f'{survey.capitalize():12s} & {num_nights:3d} & {num_tiles:5d} & '
              rf'{num_exp:6d} & {efftime_hours:6.1f} & {area:.0f} \\')
    print(r'\hline')

    print(r'\multicolumn{6}{c}{Main Survey} \\')
    print(r'\hline')
    for survey in ['main_bright', 'main_dark', 'main_backup']:
        survey, num_nights, num_tiles, num_exp, efftime_hours, area = getdata(survey)
        print(f'{survey.capitalize():12s} & {num_nights:3d} & {num_tiles:5d} & '
              rf'{num_exp:6d} & {efftime_hours:6.1f} & {area:.0f} \\')

    print(r'\enddata')
    print(r'\end{deluxetable*}')
    print()
    

def main(exp, main_start=20210514, overwrite=False):
    
    surveynames = exp['SURVEY'].copy()
    exp['SURVEY'] = np.zeros(len(exp), dtype='U20')  # don't truncate names
    exp['SURVEY'][:] = surveynames
    
    for pname in ['dark', 'bright', 'backup']:
        m = (exp['SURVEY'] == 'main') & (exp['PROGRAM'] == pname)
        exp['SURVEY'][m] = 'main_'+pname
    
    # double-check
    print('PROGRAMs per SURVEY:')
    for survey in np.unique(exp['SURVEY']):
        ii = exp['SURVEY'] == survey
        print(survey, np.unique(np.asarray(exp['PROGRAM'][ii])))
    
    survey_area = dict()
    for survey in ['cmx', 'sv1', 'sv2', 'sv3', 'special', 'main_bright', 'main_dark', 'main_backup']:
        ii = (exp['SURVEY'] == survey)
        survey_area[survey] = get_area(exp[ii])
    
    total_area = get_area(exp)
    print(f'Total area covered by any tile: {total_area:.1f}')

    build_latex_table(exp, survey_area)

    # For reference, count how many SV3 tiles were observed after the
    # start of the main survey.
    postsv = exp['NIGHT'] >= main_start
    postexp = exp[postsv]
    svexp = exp[~postsv]
    
    num_nights = len(set(postexp['NIGHT']))
    num_tiles = len(set(postexp['TILEID']))
    num_exp = len(postexp)
    
    # How many post-SV tiles were new vs. continuations of SV-era?
    post_tiles = np.unique(postexp['TILEID'])
    previously_observed = np.isin(post_tiles, svexp['TILEID'])
    num_previously_observed = np.sum(previously_observed)
    
    print(f'{num_tiles} tiles observed on {num_nights} nights ' + \
          f'after the start of the main survey on {main_start}')
    
    print(f'{num_previously_observed} had been previously observed ' + \
          'during the primary SV program')


    # parse the data further
    first_night = night_to_date(np.min(exp['NIGHT']))
    last_night = night_to_date(np.max(exp['NIGHT']))
    
    dates = list()
    d = first_night - timedelta(days=1)  # pad date to start with 0 tiles
    while d <= last_night:
        dates.append(d)
        d += timedelta(days=1)
    
    dates.append(d)  # pad date to get step plot back to 0
    
    tmp = str(main_start)
    year, month, day = int(tmp[0:4]), int(tmp[4:6]), int(tmp[6:8])
    main_date = datetime(year=year, month=month, day=day) - timedelta(days=0.5)
    
    phases = dict(sv1='SV1',
                  sv2='SV2',
                  sv3='SV3',
                  main_bright='Main / Bright',
                  main_dark='Main / Dark',
                  main_backup='Main / Backup')
    
    nexp = dict()
    ntile = dict()
    surveys = list(phases.keys())
    for survey in surveys:
        thissurvey = (exp['SURVEY'] == survey)
        nexp[survey] = list()
        ntile[survey] = list()
        for d in dates:
            night = date_to_night(d)
            ii = thissurvey & (exp['NIGHT'] == night)
            nexp[survey].append( np.sum(ii) )
            ntile[survey].append( len(np.unique(exp['TILEID'][ii])) )


    # save data for Zenodo
    zenodofile = 'zenodo/tiles_per_night.csv'
    if not os.path.isfile(zenodofile) or overwrite:
        data = Table(ntile)
        nights = [x.strftime('%Y-%m-%d') for x in dates]
        data.add_column(nights, index=0, name='night')
        data.write(zenodofile, overwrite=True)
        print(f'Wrote {zenodofile}')


    # generate the figure
    pngfile = 'figures/tiles-per-night.png'

    colors = dict(sv1='C0', sv2='C2', sv3='C1', main_dark='gray', 
                  main_bright='C3', main_backup='C4')
    alphas = dict(sv1=0.4, sv2=0.8, sv3=0.4, main_dark=0.4,
                  main_bright=0.4, main_backup=0.4)

    bindown = 1
    for survey in ntile:
        newntile = ntile[survey].copy()
        remainder = len(newntile) % bindown
        if remainder != 0:
            newntile = np.concatenate([newntile, np.zeros(bindown - remainder)])
        newntile = np.array(newntile).reshape(len(newntile) // bindown, bindown)
        newntile = np.sum(newntile, axis=1)
        ntile[survey] = newntile / bindown
    dates = dates[::bindown]
    
    plt.figure(figsize=(8.5,3))

    svlines = []
    mainlines = []
    for survey in surveys:
        plt.plot(dates, ntile[survey], drawstyle='steps-mid', label=None,
                 color=colors[survey], lw=1)
        line = plt.fill_between(
            dates, 0, ntile[survey], step='mid',
            label=phases[survey], color=colors[survey], alpha=alphas[survey])
        if 'main' in survey:
            mainlines.append(line)
        else:
            svlines.append(line)
    
    line = plt.axvline(main_date, color='k', alpha=0.5,
                       label='Start of Main Survey', linestyle='--')
    mainlines.append(line)
    
    plt.xlabel('Night')
    plt.ylabel('Unique Tiles per Night')
    plt.ylim(0,60)
    legend1  = plt.legend(svlines, [x.get_label() for x in svlines], loc='upper left')
    plt.legend(mainlines, [x.get_label() for x in mainlines], loc='upper right')
    plt.tight_layout()
    plt.gca().add_artist(legend1)
    plt.savefig(pngfile)
    plt.close()
    print(f'Wrote {pngfile}')


if __name__ == '__main__':
    """Main routine.

    """
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("--overwrite", action="store_true", help="overwrite existing zenodo files?")
    args = p.parse_args()

    expfile = '/global/cfs/cdirs/desi/public/dr1/spectro/redux/iron/exposures-iron.csv'
    exp = Table.read(expfile)
    print(f'Read {len(exp):,d} exposures from {expfile}')
    
    main(exp, overwrite=args.overwrite)
